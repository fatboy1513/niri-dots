environment {
    ELECTRON_OZONE_PLATFORM_HINT "auto"
    //QT_QPA_PLATFORMTHEME "qt6ct"
    //QT_STYLE_OVERRIDE "kvantum"
     GDK_SCALE "1.5"
}

overview {
    zoom 0.3
    workspace-shadow {
        off
    }
}

input {
    touchpad {
        tap
        natural-scroll
    }
}
// Make the wallpaper stationary, rather than moving with workspaces.
layer-rule {
    // This is for swaybg; change for other wallpaper tools.
    // Find the right namespace by running niri msg layers.
    match namespace="swww-daemon"
    place-within-backdrop true
}



layout {
    // Set gaps around windows in logical pixels.
    gaps 10
    background-color "transparent"

    center-focused-column "never"
    preset-column-widths {
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
    }

    default-column-width { proportion 0.5; }
    

    focus-ring {
        // Uncomment this line to disable the focus ring.
        off
    }

    // You can also add a border. It's similar to the focus ring, but always visible.
    border {
        // The settings are the same as for the focus ring.
        // If you enable the border, you probably want to disable the focus ring.


        width 2.2
        active-color "#d8dee9"
        inactive-color "#434c5e"

        // Color of the border around windows that request your attention.
        urgent-color "#bf616a"

        // active-gradient from="#ffbb66" to="#ffc880" angle=45 relative-to="workspace-view"
        // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
    }

}


spawn-at-startup "waybar"
layer-rule {
    match namespace="waybar"
    match at-startup=true

    // Properties that apply continuously.
    opacity 0.6

    shadow {
        on
        softness 10
        spread 10
        offset x=0 y=5
    }

    geometry-corner-radius 10
    }

prefer-no-csd
// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

// Open the Firefox picture-in-picture player as floating by default.
window-rule {
    // This app-id regular expression will work for both:
    // - host Firefox (app-id is "firefox")
    // - Flatpak Firefox (app-id is "org.mozilla.firefox")
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true
}

window-rule {
    geometry-corner-radius 12
    clip-to-geometry true
}

window-rule {
    match app-id="waybar"
    opacity 0.7
    
}
window-rule {
draw-border-with-background false

    match app-id="code"
    match app-id="kitty"
    match app-id="vesktop"
    match app-id="org.qbittorrent.qBittorrent"
    match app-id="thunar"
    match app-id="org.gnome.Nautilus"
    match app-id="chromium"
    match app-id="zathura"
    match app-id="engrampa"
    match app-id="abaddon"
    match app-id="obsidian"
    match app-id="zen"
    match app-id="tsuzuku"
    match app-id="obs-studio"
    opacity 0.95


}


binds {

    Mod+Shift+Slash { show-hotkey-overlay; }

    // Suggested binds for running programs: terminal, app launcher, screen locker.

    Mod+RETURN hotkey-overlay-title="Open a Terminal: alacritty" { spawn "kitty"; }
    Mod+A hotkey-overlay-title="Run an Application: fuzzel" { spawn "bash" "-c" "tofi-drun --drun-launch=true || pkill tofi-drun"; }

    // Example volume keys mappings for PipeWire & WirePlumber.
    // The allow-when-locked=true property makes them work even when the session is locked.
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.1-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86AudioMicMute     allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }
    XF86MonBrightnessUp allow-when-locked=true { spawn "brightnessctl" "--device=intel_backlight" "set" "+5%" ; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "--device=intel_backlight" "set" "5%-" ; }

    Mod+Tab repeat=false { toggle-overview; }

    Mod+C { close-window; }

    Mod+J     { focus-column-left; }
   	Mod+L     { focus-column-right; }

    Mod+Shift+J     { move-column-left; }
    Mod+Shift+L     { move-column-right; }
    
    // Alternative commands that move across workspaces when reaching
    // the first or last window in a column.
     Mod+K     { focus-window-or-workspace-down; }
     Mod+I     { focus-window-or-workspace-up; }
     Mod+Shift+K     { move-window-down-or-to-workspace-down; }
     Mod+Shift+I     { move-window-up-or-to-workspace-up; }

   // Mod+Home { focus-column-first; }
   // Mod+End  { focus-column-last; }
   // Mod+Ctrl+Home { move-column-to-first; }
   // Mod+Ctrl+End  { move-column-to-last; }

    //Mod+Shift+Left  { focus-monitor-left; }
    //Mod+Shift+Down  { focus-monitor-down; }
    //Mod+Shift+Up    { focus-monitor-up; }
    //Mod+Shift+Right { focus-monitor-right; }
    //Mod+Shift+H     { focus-monitor-left; }
    //Mod+Shift+J     { focus-monitor-down; }
    //Mod+Shift+K     { focus-monitor-up; }
    //Mod+Shift+L     { focus-monitor-right; }

    //Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    //Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    //Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    //Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    //Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    //Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    //Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    //Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // And you can also move a whole workspace to another monitor:
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    Mod+Page_Down      { focus-workspace-down; }
    Mod+Page_Up        { focus-workspace-up; }
    //Mod+U              { focus-workspace-down; }
    //Mod+I              { focus-workspace-up; }
    Mod+Ctrl+Page_Down { move-column-to-workspace-down; }
    Mod+Ctrl+Page_Up   { move-column-to-workspace-up; }
	Mod+Ctrl+U         { move-column-to-workspace-down; }
    //Mod+Ctrl+I         { move-column-to-workspace-up; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    // ...

    //Mod+Shift+Page_Down { move-workspace-down; }
    //Mod+Shift+Page_Up   { move-workspace-up; }
    Mod+Shift+Ctrl+K      { move-workspace-down; }
    Mod+Shift+Ctrl+I      { move-workspace-up; }

    // You can bind mouse wheel scroll ticks using the following syntax.
    // These binds will change direction based on the natural-scroll setting.
    //
    // To avoid scrolling through workspaces really fast, you can use
    // the cooldown-ms property. The bind will be rate-limited to this value.
    // You can set a cooldown on any bind, but it's most useful for the wheel.
    Mod+WheelScrollDown      cooldown-ms=150 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=150 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=150 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=150 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // Similarly, you can bind touchpad scroll "ticks".
    // Touchpad scrolling is continuous, so for these binds it is split into
    // discrete intervals.
    // These binds are also affected by touchpad's natural-scroll, so these
    // example binds are "inverted", since we have natural-scroll enabled for
    // touchpads by default.
    // Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
    // Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }

    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    Mod+1 { focus-workspace 1; }
    Mod+2 { focus-workspace 2; }
    Mod+3 { focus-workspace 3; }
    Mod+4 { focus-workspace 4; }
    Mod+5 { focus-workspace 5; }
    Mod+6 { focus-workspace 6; }
    Mod+7 { focus-workspace 7; }
    Mod+8 { focus-workspace 8; }
    Mod+9 { focus-workspace 9; }
    Mod+Ctrl+1 { move-column-to-workspace 1; }
    Mod+Ctrl+2 { move-column-to-workspace 2; }
    Mod+Ctrl+3 { move-column-to-workspace 3; }
    Mod+Ctrl+4 { move-column-to-workspace 4; }
    Mod+Ctrl+5 { move-column-to-workspace 5; }
    Mod+Ctrl+6 { move-column-to-workspace 6; }
    Mod+Ctrl+7 { move-column-to-workspace 7; }
    Mod+Ctrl+8 { move-column-to-workspace 8; }
    Mod+Ctrl+9 { move-column-to-workspace 9; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // Switches focus between the current and the previous workspace.
    // Mod+Tab { focus-workspace-previous; }

    // The following binds move the focused window in and out of a column.
    // If the window is alone, they will consume it into the nearby column to the side.
    // If the window is already in a column, they will expel it out.
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }

    // Consume one window from the right to the bottom of the focused column.
    Mod+Comma  { consume-window-into-column; }
    // Expel the bottom window from the focused column to the right.
    Mod+Period { expel-window-from-column; }

    Mod+R { switch-preset-column-width; }
    Mod+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }

    // Expand the focused column to space not taken up by other fully visible columns.
    // Makes the column "fill the rest of the space".
    Mod+Ctrl+F { expand-column-to-available-width; }

    Mod+Shift+C { center-column; }

    // Center all fully visible columns on screen.
    Mod+Ctrl+C { center-visible-columns; }

    // Finer width adjustments.
    // This command can also:
    // * set width in pixels: "1000"
    // * adjust width in pixels: "-5" or "+5"
    // * set width as a percentage of screen width: "25%"
    // * adjust width as a percentage of screen width: "-10%" or "+10%"
    // Pixel sizes use logical, or scaled, pixels. I.e. on an output with scale 2.0,
    // set-column-width "100" will make the column occupy 200 physical screen pixels.
    Mod+Alt+J { set-column-width "-10%"; }
    Mod+Alt+L { set-column-width "+10%"; }

    // Finer height adjustments when in cJolumn with other windows.
    Mod+Alt+I { set-window-height "-10%"; }
    Mod+Alt+K { set-window-height "+10%"; }

    // Move the focused window between the floating and the tiling layout.
    Mod+Space        { toggle-window-floating; }
    Mod+Shift+Space { switch-focus-between-floating-and-tiling; }

    // Toggle tabbed column display mode.
    // Windows in this column will appear as vertical tabs,
    // rather than stacked on top of each other.
    Mod+W { toggle-column-tabbed-display; }

    // Actions to switch layouts.
    // Note: if you uncomment these, make sure you do NOT have
    // a matching layout switch hotkey configured in xkb options above.
    // Having both at once on the same hotkey will break the switching,
    // since it will switch twice upon pressing the hotkey (once by xkb, once by niri).
    // Mod+Space       { switch-layout "next"; }
    // Mod+Shift+Space { switch-layout "prev"; }

    Mod+Shift+S { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }

    // Applications such as remote-desktop clients and software KVM switches may
    // request that niri stops processing the keyboard shortcuts defined here
    // so they may, for example, forward the key presses as-is to a remote machine.
    // It's a good idea to bind an escape hatch to toggle the inhibitor,
    // so a buggy application can't hold your session hostage.
    //
    // The allow-inhibiting=false property can be applied to other binds as well,
    // which ensures niri always processes them, even when an inhibitor is active.
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // The quit action will show a confirmation dialog to avoid accidental exits.
    Mod+Shift+E { spawn "thunar"; }
    Ctrl+Alt+Delete { quit; }

    // Powers off the monitors. To turn them back on, do any input like
    // moving the mouse or pressing any other key.
    Mod+Shift+P { power-off-monitors; }
}
